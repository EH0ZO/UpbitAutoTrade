
myToken = "" 
myChannel = "#c-pjt"

def post_message(token, channel, text):
    # 슬랙 메시지 전송
    response = requests.post("https://slack.com/api/chat.postMessage",
        headers={"Authorization": "Bearer "+token},
        data={"channel": channel,"text": text}
    )
    time.sleep(0.1)
    return response

def get_start_time(ticker):
    # 시작 시간 조회
    df = get_ohlcvp(ticker, interval="day", count=1)
    start_time = df.index[0]
    return start_time

def get_ohlc(ticker, intv):
    # 캔들 조회
    df = get_ohlcvp(ticker, interval=intv, count=1)
    ret = [df.iloc[0]['open'], df.iloc[0]['high'], df.iloc[0]['low'], df.iloc[0]['close']]
    return ret

def get_close_price(ticker, intv):
    # 전 시간 종가 return
    df = get_ohlcvp(ticker, interval=intv, count=2)
    close = df.iloc[0]['close']
    return close

def get_open_price(ticker, intv):
    # 전 시간 종가 return
    df = get_ohlcvp(ticker, interval=intv, count=1)
    open = df.iloc[0]['open']
    return open
    
def buy_limit(tkr, price, balance):
    vol = balance / price
    buy_result = upbit.buy_limit_order(tkr, price, vol * 0.999)
    if buy_result != None:
        return True
    else:
        return False

def sell_limit(tkr, price):
    sell_result = upbit.sell_limit_order(tkr, price, get_balance(tkr,"COIN"))
    if sell_result != None:
        return True
    else:
        return False

def tick(price):
    if price < 10:
        return 0.01
    elif price < 100:
        return 0.1
    elif price < 1000:
        return 1
    elif price < 10000:
        return 5
    elif price < 100000:
        return 10
    elif price < 500000:
        return 50
    elif price < 1000000:
        return 100
    elif price < 2000000:
        return 500
    else:
        return 1000

def isNewCandle(intv, now):
    hour = now.hour
    if hour < 9:
        hour += 24
    hour -= 9
    if hour % intv == 0:
        return True
    else:
        return False

def select_tkrs(intv, c):
	# 데이터 스크래핑
    tkrs = get_tickers(fiat="KRW")
    vol =[0]*len(tkrs)
    data = [("tkr",0)] * len(tkrs)
    for i in range(0,len(tkrs)):
        df = get_ohlcvp(tkrs[i], intv, c)
        vol[i] = df.iloc[0]['price']
        data[i] = (tkrs[i], vol[i])
        time.sleep(0.1)
    data = sorted(data, key = lambda data: data[1], reverse = True)
	# 매수종목 선정
    top = ["KRW-"] * tkr_num
    for i in range(0, tkr_num):
        top[i] = data[i][0]
    
    return top

    
def get_ma(ticker, intv, c, p):
    # 이동 평균선 조회
    df = get_ohlcvp(ticker, interval=intv, count=(c+p))
    ma = df['close'].rolling(c).mean().iloc[-p]
    return ma
    
def get_high(ticker, intv, c):
    # 고가 조회
    df = get_ohlcvp(ticker, interval=intv, count=c)
    high = df['high'].rolling(c).max().iloc[-1]
    return high

def get_low(ticker, intv, c):
    # 저가 조회
    df = get_ohlcvp(ticker, interval=intv, count=c)
    low = df['low'].rolling(c).min().iloc[-1]
    return low